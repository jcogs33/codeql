extensions:
  - addsTo:
      pack: codeql/java-all
      extensible: sinkModel
    data:
    # Definite TPs (IMO)
    - ["java.io", "FilePermission", True, "FilePermission", "", "", "Argument[0]", "create-file", "manual"] #  "Creates a new FilePermission object with the specified actions. path is the pathname of a file or directory, and actions contains a comma-separated list of the desired actions granted on the file or directory. Possible actions are "read", "write", "execute", "delete", and "readlink"." Also, see: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=24895
    - ["java.lang", "Redirect", True, "appendTo", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.lang", "Redirect", True, "from", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.lang", "Redirect", True, "to", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.channels", "AsynchronousFileChannel", True, "open", "(Path,OpenOption[])", "", "Argument[0]", "create-file", "manual"] # "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
    - ["java.nio.channels", "AsynchronousFileChannel", True, "open", "(Path,Set,ExecutorService,FileAttribute[])", "", "Argument[0]", "create-file", "manual"] # "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file."
    - ["java.nio.channels", "FileChannel", True, "open", "(Path,OpenOption[])", "", "Argument[0]", "create-file", "manual"] # might subtype from `AsynchronousFileChannel`
    - ["java.nio.channels", "FileChannel", True, "open", "(Path,Set,FileAttribute[])", "", "Argument[0]", "create-file", "manual"] # might subtype from `AsynchronousFileChannel`
    - ["java.nio.file", "FileSystems", True, "newFileSystem", "(Path,ClassLoader)", "", "Argument[0]", "create-file", "manual"] # "Constructs a new FileSystem to access the contents of a file as a file system."
    - ["java.nio.file", "Files", True, "createTempFile", "(Path,String,String,FileAttribute[])", "", "Argument[0]", "create-file", "manual"]	Path	dir	createTempFile	yes, for sink kind "create-file"
    - ["java.nio.file", "Files", True, "delete", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "lines", "(Path)", "", "Argument[0]", "create-file", "manual"] # "Read all lines from a file as a Stream."
    - ["java.nio.file", "Files", True, "lines", "(Path,Charset)", "", "Argument[0]", "create-file", "manual"] # "Read all lines from a file as a Stream."
    - ["java.nio.file", "Files", True, "newBufferedReader", "(Path)", "", "Argument[0]", "create-file", "manual"] # "Opens a file for reading, returning a BufferedReader to read text from the file in an efficient manner."
    - ["java.nio.file", "Files", True, "newBufferedReader", "(Path,Charset)", "", "Argument[0]", "create-file", "manual"] # "Opens a file for reading, returning a BufferedReader to read text from the file in an efficient manner."
    - ["java.nio.file", "Files", True, "newByteChannel", "(Path,OpenOption[])", "", "Argument[0]", "create-file", "manual"]	# "Opens or creates a file, returning a seekable byte channel to access the file."
    - ["java.nio.file", "Files", True, "newByteChannel", "(Path,Set,FileAttribute[])", "", "Argument[0]", "create-file", "manual"] # "Opens or creates a file, returning a seekable byte channel to access the file."
    - ["java.nio.file", "Files", True, "newDirectoryStream", "(Path)", "", "Argument[0]", "create-file", "manual"] # "Opens a directory,..."
    - ["java.nio.file", "Files", True, "newDirectoryStream", "(Path,Filter)", "", "Argument[0]", "create-file", "manual"] # "Opens a directory,..."
    - ["java.nio.file", "Files", True, "newDirectoryStream", "(Path,String)", "", "Argument[0]", "create-file", "manual"] # "Opens a directory,..."
    - ["java.nio.file", "Files", True, "newInputStream", "", "", "Argument[0]", "create-file", "manual"] # Opens a file, returning an input stream to read from the file."
    - ["java.nio.file", "Files", True, "readAllBytes", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "readAllLines", "(Path)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "readAllLines", "(Path,Charset)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "readSymbolicLink", "", "", "Argument[0]", "create-file", "manual"] # "Reads the target of a symbolic link"
    - ["java.nio.file", "Files", True, "setPosixFilePermissions", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "copy", "", "", "Argument[1]", "create-file", "manual"]	Path	target	copy	no
    # ! check if spi ones are already covered by Files methods since "The methods defined by the Files class will typically delegate to an instance of this class.".
    - ["java.nio.file.spi", "FileSystemProvider", True, "createDirectory", "", "", "Argument[0]", "create-file", "manual"]	Path	dir	createDirectory	no
    - ["java.nio.file.spi", "FileSystemProvider", True, "createLink", "", "", "Argument[0]", "create-file", "manual"]	Path	link	createLink	no
    - ["java.nio.file.spi", "FileSystemProvider", True, "createSymbolicLink", "", "", "Argument[0]", "create-file", "manual"]	Path	link	createSymbolicLink	no
    - ["java.nio.file.spi", "FileSystemProvider", True, "createSymbolicLink", "", "", "Argument[1]", "create-file", "manual"]	Path	target	createSymbolicLink	no
    - ["java.nio.file.spi", "FileSystemProvider", True, "delete", "", "", "Argument[0]", "create-file", "manual"]	Path	path	delete	no
    - ["java.nio.file.spi", "FileSystemProvider", True, "deleteIfExists", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "move", "", "", "Argument[1]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "newAsynchronousFileChannel", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "newByteChannel", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "newDirectoryStream", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "newFileChannel", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "newFileSystem", "(Path,Map)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "newInputStream", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "newOutputStream", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "readSymbolicLink", "", "", "Argument[0]", "create-file", "manual"]
    # ! need OutputStream and PrintStream params for Formatter as well?
    - ["java.util", "Formatter", True, "Formatter", "(File)", "", "Argument[0]", "create-file", "manual"] # "...otherwise, a new file will be created...."
    - ["java.util", "Formatter", True, "Formatter", "(File,String)", "", "Argument[0]", "create-file", "manual"]	# "...otherwise, a new file will be created...."
    - ["java.util", "Formatter", True, "Formatter", "(File,String,Locale)", "", "Argument[0]", "create-file", "manual"]	# "...otherwise, a new file will be created...."
    - ["java.util", "Formatter", True, "Formatter", "(String)", "", "Argument[0]", "create-file", "manual"]	# "...otherwise, a new file will be created...."
    - ["java.util", "Formatter", True, "Formatter", "(String,String)", "", "Argument[0]", "create-file", "manual"]	# "...otherwise, a new file will be created...."
    - ["java.util", "Formatter", True, "Formatter", "(String,String,Locale)", "", "Argument[0]", "create-file", "manual"] # "...otherwise, a new file will be created...."
    - ["javax.sound.midi", "MidiSystem", True, "write", "(Sequence,int,File)", "", "Argument[2]", "create-file", "manual"]
    - ["javax.sound.midi", "MidiSystem", True, "write", "(Sequence,int,OutputStream)", "", "Argument[2]", "create-file", "manual"]
    - ["javax.sound.midi.spi", "MidiFileWriter", True, "write", "(Sequence,int,File)", "", "Argument[2]", "create-file", "manual"]
    - ["javax.sound.midi.spi", "MidiFileWriter", True, "write", "(Sequence,int,OutputStream)", "", "Argument[2]", "create-file", "manual"]


    # Definite TPs, and already modeled (or partially modeled) in PathCreation.qll
    - ["java.io", "FileInputStream", True, "FileInputStream", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["java.io", "FileInputStream", True, "FileInputStream", "(FileDescriptor)", "", "Argument[0]", "create-file", "manual"]
    - ["java.io", "FileReader", True, "FileReader", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["java.io", "FileReader", True, "FileReader", "(FileDescriptor)", "", "Argument[0]", "create-file", "manual"]
    - ["java.io", "FileReader", True, "FileReader", "(String)", "", "Argument[0]", "create-file", "manual"]


    # Probably TPs (I think)
    - ["java.io", "ByteArrayOutputStream", True, "writeTo", "", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?, "Writes the complete contents of this byte array output stream to the specified output stream argument"
    - ["java.lang", "ProcessBuilder", True, "redirectInput", "(File)", "", "Argument[0]", "create-file", "manual"] # seems like a TP, but would it cause overlapping sinks with Redirect.from(file)?
    - ["java.lang", "ProcessBuilder", True, "redirectOutput", "(File)", "", "Argument[0]", "create-file", "manual"] # seems like a TP, but would it cause overlapping sinks with Redirect.to(file)?
    - ["java.nio.channels", "Channels", True, "newChannel", "(OutputStream)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.nio.file", "Files", True, "setAttribute", "", "", "Argument[0]", "create-file", "manual"] # TP if setting the file attributes is useful for attacker?
	  - ["java.nio.file", "Files", True, "setOwner", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "setAttribute", "", "", "Argument[0]", "create-file", "manual"]
    - ["javax.print", "StreamPrintServiceFactory", True, "getPrintService", "", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.sampled", "AudioSystem", True, "getAudioInputStream", "(File)", "", "Argument[0]", "create-file", "manual"] # "Obtains an audio input stream from the provided File."
    - ["javax.sound.sampled", "AudioSystem", True, "write", "(AudioInputStream,Type,File)", "", "Argument[2]", "create-file", "manual"] # "Writes a stream of bytes representing an audio file of the specified file type to the external file provided."
    - ["javax.sound.sampled", "AudioSystem", True, "write", "(AudioInputStream,Type,OutputStream)", "", "Argument[2]", "create-file", "manual"]
    - ["javax.sound.sampled.spi", "AudioFileReader", True, "getAudioInputStream", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.sampled.spi", "AudioFileWriter", True, "write", "(AudioInputStream,Type,File)", "", "Argument[2]", "create-file", "manual"]
    - ["javax.sound.sampled.spi", "AudioFileWriter", True, "write", "(AudioInputStream,Type,OutputStream)", "", "Argument[2]", "create-file", "manual"]
    - ["javax.tools", "StandardJavaFileManager", True, "getJavaFileObjects", "(File[])", "", "Argument[0]", "create-file", "manual"] # might be a step instead actually?
    - ["javax.xml.soap", "SOAPMessage", True, "writeTo", "", "", "Argument[0]", "create-file", "manual"] # "Writes this SOAPMessage object to the given output stream."
    - ["javax.xml.transform.stream", "StreamResult", True, "StreamResult", "(OutputStream)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.xml.transform.stream", "StreamResult", True, "setOutputStream", "", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.midi", "MidiSystem", True, "getSoundbank", "(File)", "", "Argument[0]", "create-file", "manual"] # "Constructs a Soundbank by reading it from the specified File."


    # Constructors that are possibly TPs
    - ["java.beans", "XMLEncoder", True, "XMLEncoder", "(OutputStream)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.beans", "XMLEncoder", True, "XMLEncoder", "(OutputStream,String,boolean,int)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "BufferedOutputStream", True, "BufferedOutputStream", "(OutputStream)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "BufferedOutputStream", True, "BufferedOutputStream", "(OutputStream,int)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "DataOutputStream", True, "DataOutputStream", "", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "File", True, "File", "(String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.io", "FilterOutputStream", True, "FilterOutputStream", "", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "ObjectOutputStream", True, "ObjectOutputStream", "", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "OutputStreamWriter", True, "OutputStreamWriter", "(OutputStream)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "OutputStreamWriter", True, "OutputStreamWriter", "(OutputStream,Charset)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "OutputStreamWriter", True, "OutputStreamWriter", "(OutputStream,CharsetEncoder)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "OutputStreamWriter", True, "OutputStreamWriter", "(OutputStream,String)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "PrintStream", True, "PrintStream", "(OutputStream)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "PrintStream", True, "PrintStream", "(OutputStream,boolean)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "PrintStream", True, "PrintStream", "(OutputStream,boolean,String)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "PrintWriter", True, "PrintWriter", "(OutputStream)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.io", "PrintWriter", True, "PrintWriter", "(OutputStream,boolean)", "", "Argument[0]", "create-file", "manual"] # TP if OutputStream is a FileOutputStream?
    - ["java.util.jar", "JarFile", True, "JarFile", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.jar", "JarFile", True, "JarFile", "(File,boolean)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.jar", "JarFile", True, "JarFile", "(File,boolean,int)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.jar", "JarOutputStream", True, "JarOutputStream", "(OutputStream)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.jar", "JarOutputStream", True, "JarOutputStream", "(OutputStream,Manifest)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.logging", "StreamHandler", True, "StreamHandler", "(OutputStream,Formatter)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "CheckedOutputStream", True, "CheckedOutputStream", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "DeflaterOutputStream", True, "DeflaterOutputStream", "(OutputStream)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "DeflaterOutputStream", True, "DeflaterOutputStream", "(OutputStream,Deflater)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "DeflaterOutputStream", True, "DeflaterOutputStream", "(OutputStream,Deflater,boolean)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "DeflaterOutputStream", True, "DeflaterOutputStream", "(OutputStream,Deflater,int)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "DeflaterOutputStream", True, "DeflaterOutputStream", "(OutputStream,Deflater,int,boolean)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "DeflaterOutputStream", True, "DeflaterOutputStream", "(OutputStream,boolean)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "GZIPOutputStream", True, "GZIPOutputStream", "(OutputStream)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "GZIPOutputStream", True, "GZIPOutputStream", "(OutputStream,boolean)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "GZIPOutputStream", True, "GZIPOutputStream", "(OutputStream,int)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "GZIPOutputStream", True, "GZIPOutputStream", "(OutputStream,int,boolean)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "InflaterOutputStream", True, "InflaterOutputStream", "(OutputStream)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "InflaterOutputStream", True, "InflaterOutputStream", "(OutputStream,Inflater)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "InflaterOutputStream", True, "InflaterOutputStream", "(OutputStream,Inflater,int)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "ZipFile", True, "ZipFile", "(File)", "", "Argument[0]", "create-file", "manual"]	# "@param file the ZIP file to be opened for reading"
    - ["java.util.zip", "ZipFile", True, "ZipFile", "(File,Charset)", "", "Argument[0]", "create-file", "manual"] # "@param file the ZIP file to be opened for reading"
    - ["java.util.zip", "ZipFile", True, "ZipFile", "(File,int)", "", "Argument[0]", "create-file", "manual"] # "@param file the ZIP file to be opened for reading"
    - ["java.util.zip", "ZipFile", True, "ZipFile", "(File,int,Charset)", "", "Argument[0]", "create-file", "manual"] # "@param file the ZIP file to be opened for reading"
    - ["java.util.zip", "ZipOutputStream", True, "ZipOutputStream", "(OutputStream)", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.zip", "ZipOutputStream", True, "ZipOutputStream", "(OutputStream,Charset)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.activation", "MailcapCommandMap", True, "MailcapCommandMap", "(String)", "", "Argument[0]", "create-file", "manual"] # "@param fileName The name of the <i>mailcap</i> file to open"


    # Unsure about
    - ["java.applet", "AppletContext", True, "showDocument", "(URL,String)", "", "Argument[1]", "create-file", "manual"] # FP unless related to URL-traversing?
    - ["java.lang", "Runtime", True, "exec", "(String,String[],File)", "", "Argument[2]", "create-file", "manual"] # bad to control dir where executed? (Note that Arg[0] is sink for `java/command-line-injection`. See ExternalProcess.qll for model, can maybe convert to MaD?)
    - ["java.lang", "Runtime", True, "exec", "(String[],String[],File)", "", "Argument[2]", "create-file", "manual"] # bad to control dir where executed? (Note that Arg[0] is sink for `java/command-line-injection`. See ExternalProcess.qll for model, can maybe convert to MaD?)
    - ["java.net", "URI", True, "URI", "(String,String,String,String)", "", "Argument[2]", "create-file", "manual"] # related to URL-traversing (see OWASP)?
    - ["java.net", "URI", True, "URI", "(String,String,String,String,String)", "", "Argument[2]", "create-file", "manual"] # related to URL-traversing (see OWASP)?
    - ["java.net", "URI", True, "URI", "(String,String,String,int,String,String,String)", "", "Argument[4]", "create-file", "manual"] # related to URL-traversing (see OWASP)?
    - ["java.net", "URL", True, "URL", "(String,String,String)", "", "Argument[2]", "create-file", "manual"] # related to URL-traversing (see OWASP)?
    - ["java.net", "URL", True, "URL", "(String,String,int,String)", "", "Argument[3]", "create-file", "manual"] # related to URL-traversing (see OWASP)?
    - ["java.net", "URL", True, "URL", "(String,String,int,String,URLStreamHandler)", "", "Argument[3]", "create-file", "manual"] # related to URL-traversing (see OWASP)?
    - ["java.nio.file", "Files", True, "createSymbolicLink", "", "", "Argument[1]", "create-file", "manual"] # Existing sink for Arg[0] (Path link); why isn't Path target interesting here?
    - ["java.nio.file", "Files", True, "getFileStore", "", "", "Argument[0]", "create-file", "manual"] # not sure if I'm clear enough on what a FileStore is...
    - ["java.nio.file", "PathMatcher", True, "matches", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "getFileStore", "", "", "Argument[0]", "create-file", "manual"] # not sure if I'm clear enough on what a FileStore is...
    - ["java.rmi.server", "LogStream", True, "setOutputStream", "", "", "Argument[0]", "create-file", "manual"] # "Set the stream to which output from this log is sent."
    - ["java.rmi.server", "RemoteServer", True, "setLog", "", "", "Argument[0]", "create-file", "manual"] # "Log RMI calls to the output stream"
    - ["java.security", "Builder", True, "newInstance", "(String,Provider,File,ProtectionParameter)", "", "Argument[2]", "create-file", "manual"] # TP? "@param file the File that contains the KeyStore data"
    - ["java.security", "Builder", True, "newInstance", "(String,Provider,File,ProtectionParameter)", "", "Argument[2]", "create-file", "manual"] # "Generates the extension's DER encoding and writes it to the output stream."
    - ["java.util.jar", "Manifest", True, "write", "", "", "Argument[0]", "create-file", "manual"] # not sure if Manifest is interesting... "Writes the Manifest to the specified OutputStream."
    - ["java.util.jar", "Packer", True, "pack", "(JarFile,OutputStream)", "", "Argument[1]", "create-file", "manual"]
    - ["java.util.jar", "Packer", True, "pack", "(JarInputStream,OutputStream)", "", "Argument[1]", "create-file", "manual"]
    - ["java.util.prefs", "AbstractPreferences", True, "node", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.prefs", "Preferences", True, "node", "", "", "Argument[0]", "create-file", "manual"] # not sure about Preferences
    - ["javax.activation", "FileDataSource", True, "FileDataSource", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.security.auth.kerberos", "KeyTab", True, "getInstance", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.security.auth.kerberos", "KeyTab", True, "getInstance", "(KerberosPrincipal,File)", "", "Argument[1]", "create-file", "manual"]
    - ["javax.security.auth.kerberos", "KeyTab", True, "getUnboundInstance", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.midi.spi", "SoundbankReader", True, "getSoundbank", "(File)", "", "Argument[0]", "create-file", "manual"] # don't understand SoundBank enough; "Obtains a soundbank object from the {@code File} provided."
    - ["javax.tools", "Tool", True, "run", "", "", "Argument[1]", "create-file", "manual"] # "Run the tool with the given I/O channels and arguments."
    - ["java.util", "Properties", True, "save", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.util", "Properties", True, "store", "(OutputStream,String)", "", "Argument[0]", "create-file", "manual"]


    # Probably FPs
    - ["java.lang", "SecurityManager", True, "checkDelete", "", "", "Argument[0]", "create-file", "manual"] # FP since I don't think performs the operation, just checks if it's possible?
    - ["java.lang", "SecurityManager", True, "checkRead", "(FileDescriptor)", "", "Argument[0]", "create-file", "manual"] # FP since I don't think performs the operation, just checks if it's possible?
    - ["java.lang", "SecurityManager", True, "checkRead", "(String)", "", "Argument[0]", "create-file", "manual"] # FP since I don't think performs the operation, just checks if it's possible?
    - ["java.lang", "SecurityManager", True, "checkRead", "(String,Object)", "", "Argument[0]", "create-file", "manual"] # FP since I don't think performs the operation, just checks if it's possible?
    - ["java.lang", "SecurityManager", True, "checkSecurityAccess", "", "", "Argument[0]", "create-file", "manual"] # FP since I don't think performs the operation, just checks if it's possible?
    - ["java.lang", "SecurityManager", True, "checkWrite", "(FileDescriptor)", "", "Argument[0]", "create-file", "manual"] # FP since I don't think performs the operation, just checks if it's possible?
    - ["java.lang", "SecurityManager", True, "checkWrite", "(String)", "", "Argument[0]", "create-file", "manual"] # FP since I don't think performs the operation, just checks if it's possible?
    - ["java.lang", "StackTraceElement", True, "StackTraceElement", "", "", "Argument[2]", "create-file", "manual"] # seems uninteresting to control this fileName?
    - ["java.net", "FileNameMap", True, "getContentTypeFor", "", "", "Argument[0]", "create-file", "manual"] # seems uninteresting, "A simple interface which provides a mechanism to map between a file name and a MIME type string."
    - ["java.nio.file", "Files", True, "getAttribute", "", "", "Argument[0]", "create-file", "manual"] # prbly not interesting; might be interesting if could edit attribute?, from docs: "Reads the value of a file attribute."
    - ["java.nio.file", "Files", True, "getFileAttributeView", "", "", "Argument[0]", "create-file", "manual"] prbly not interesting; might be interesting if could edit attribute?, from docs: "Returns a file attribute view of a given type."
    - ["java.nio.file", "Files", True, "readAttributes", "(Path,Class,LinkOption[])", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "readAttributes", "(Path,String,LinkOption[])", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "checkAccess", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "getFileAttributeView", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "readAttributes", "(Path,Class,LinkOption[])", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "readAttributes", "(Path,String,LinkOption[])", "", "Argument[0]", "create-file", "manual"]
    - ["javax.activation", "FileTypeMap", True, "getContentType", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.naming.event", "EventContext", True, "addNamingListener", "(String,int,NamingListener)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.naming.event", "EventDirContext", True, "addNamingListener", "(String,String,Object[],SearchControls,NamingListener)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.naming.event", "EventDirContext", True, "addNamingListener", "(String,String,SearchControls,NamingListener)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.midi", "MidiSystem", True, "getMidiFileFormat", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.sampled", "AudioSystem", True, "getAudioFileFormat", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.sampled.spi", "AudioFileReader", True, "getAudioFileFormat", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.xml.crypto.dsig", "XMLSignatureFactory", True, "newSignatureProperty", "", "", "Argument[1]", "create-file", "manual"] # "@param target the target URI of the Signature that this property applies to"
    - ["javax.xml.stream", "XMLEventFactory", True, "createProcessingInstruction", "", "", "Argument[0]", "create-file", "manual"] # String target doesn't seem related to a File/Path
    - ["javax.xml.stream", "XMLStreamWriter", True, "writeProcessingInstruction", "(String)", "", "Argument[0]", "create-file", "manual"] # ProcessingInstruction not interesting I think
    - ["javax.xml.stream", "XMLStreamWriter", True, "writeProcessingInstruction", "(String,String)", "", "Argument[0]", "create-file", "manual"] # ProcessingInstruction not interesting I think
    - ["javax.sound.midi", "MidiSystem", True, "getSequence", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.midi.spi", "MidiFileReader", True, "getMidiFileFormat", "(File)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.sound.midi.spi", "MidiFileReader", True, "getSequence", "(File)", "", "Argument[0]", "create-file", "manual"]


    # Exceptions that are probably FPs (unless can get useful info from controlling the exception?)
    - ["java.nio.file", "AccessDeniedException", True, "AccessDeniedException", "(String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "AccessDeniedException", True, "AccessDeniedException", "(String,String,String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "AtomicMoveNotSupportedException", True, "AtomicMoveNotSupportedException", "", "", "Argument[1]", "create-file", "manual"]
    - ["java.nio.file", "DirectoryNotEmptyException", True, "DirectoryNotEmptyException", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "FileAlreadyExistsException", True, "FileAlreadyExistsException", "(String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "FileAlreadyExistsException", True, "FileAlreadyExistsException", "(String,String,String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "FileSystemException", True, "FileSystemException", "(String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "FileSystemException", True, "FileSystemException", "(String,String,String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "FileSystemLoopException", True, "FileSystemLoopException", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "NoSuchFileException", True, "NoSuchFileException", "(String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "NoSuchFileException", True, "NoSuchFileException", "(String,String,String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "NotDirectoryException", True, "NotDirectoryException", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "NotLinkException", True, "NotLinkException", "(String)", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "NotLinkException", True, "NotLinkException", "(String,String,String)", "", "Argument[0]", "create-file", "manual"]
    - ["javax.script", "ScriptException", True, "ScriptException", "(String,String,int)", "", "Argument[1]", "create-file", "manual"]
    - ["javax.script", "ScriptException", True, "ScriptException", "(String,String,int,int)", "", "Argument[1]", "create-file", "manual"]


    # Definite FPs



    # Probably neutrals
    - ["java.io", "File", True, "compareTo", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.io", "FileFilter", True, "accept", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.lang", "ProcessBuilder", True, "redirectError", "(File)", "", "Argument[0]", "create-file", "manual"] # redirecting errors not interesting?
    - ["java.nio.file", "Files", True, "exists", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "getLastModifiedTime", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "getOwner", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "getPosixFilePermissions", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isDirectory", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isExecutable", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isHidden", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isReadable", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isRegularFile", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isSameFile", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isSameFile", "", "", "Argument[1]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isSymbolicLink", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "isWritable", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "list", "", "", "Argument[0]", "create-file", "manual"] # not interesting?
    - ["java.nio.file", "Files", True, "notExists", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "probeContentType", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "setLastModifiedTime", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file", "Files", True, "size", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "isHidden", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "isSameFile", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileSystemProvider", True, "isSameFile", "", "", "Argument[1]", "create-file", "manual"]
    - ["java.nio.file.spi", "FileTypeDetector", True, "probeContentType", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.text", "Collator", True, "compare", "(String,String)", "", "Argument[1]", "create-file", "manual"]
    - ["java.text", "Collator", True, "equals", "(String,String)", "", "Argument[1]", "create-file", "manual"]
    - ["java.text", "RuleBasedCollator", True, "compare", "", "", "Argument[1]", "create-file", "manual"]
    - ["java.util.prefs", "AbstractPreferences", True, "nodeExists", "", "", "Argument[0]", "create-file", "manual"]
    - ["java.util.prefs", "Preferences", True, "nodeExists", "", "", "Argument[0]", "create-file", "manual"]



    # Probably steps
    - ["java.lang", "Runtime", True, "getLocalizedOutputStream", "", "", "Argument[0]", "create-file", "manual"] # "This method takes an OutputStream and returns an OutputStream equivalent to the argument in all respects except that it is localized" (deprecated since JDK 1.1. so prbly not that interesting)


    # Too complex for MaD? (lambda flow, etc.)
    - ["java.io", "FilenameFilter", True, "accept", "", "", "Argument[0]", "create-file", "manual"]


    # ! Questions:
     - URLs as Path-Inj sinks or should that have its own query (See OWASP, etc.)? - the existing path-inj query is about attacker *accessing* unexpected resources (e.g. reading, writing/modifying, deleting, etc.)
     - Can we get rid of the constructors and have more precise sinks instead? And let steps handle getting to those precise sinks??
     - Exceptions interesting at all?


    # TODO: make sure correct subtype False/True before fully add these.
