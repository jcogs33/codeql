/**
 * @id java/summary/generated-vs-manual-coverage
 * @name Metrics of generated versus manual MaD coverage
 * @description Expose metrics for the number of API endpoints covered by generated versus manual MaD models.
 * @kind table
 * @tags summary
 */

import java
import semmle.code.java.dataflow.FlowSummary
import utils.modelgenerator.internal.CaptureModels
import semmle.code.java.dataflow.internal.FlowSummaryImpl as FlowSummaryImpl

/**
 * Returns the number of `DataFlowTargetApi`s with Summary MaD models
 * for a given package and provenance.
 */
bindingset[package]
private float getNumMadModeledApis(string package, string provenance) {
  provenance in ["generated", "manual", "both"] and
  result =
    count(SummarizedCallable sc |
      package = sc.asCallable().getDeclaringType().getPackage().toString() and
      exists(DataFlowTargetApi dataFlowTargApi | sc.asCallable() = dataFlowTargApi) and
      (
        sc.isAutoGenerated() and // "auto-only"
        provenance = "generated"
        or
        sc.isManuallyGenerated() and // "manual-only"
        provenance = "manual"
        or
        sc.isBothAutoAndManuallyGenerated() and // "both"
        provenance = "both"
      )
    )
}

/**
 * Returns the total number of `DataFlowTargetApi`s with either a Summary or
 * a Negative Summary MaD model for a given package.
 */
bindingset[package]
float getTotalNumModeledApis(string package) {
  result =
    count(DataFlowTargetApi dataFlowTargApi |
      package = dataFlowTargApi.getDeclaringType().getPackage().toString() and
      (
        exists(SummarizedCallable sc | dataFlowTargApi = sc.asCallable()) or
        exists(FlowSummaryImpl::Public::NegativeSummarizedCallable nc |
          dataFlowTargApi = nc.asCallable()
        )
      )
    )
}

from
  DataFlowTargetApi dataFlowTargApi, string package, float generatedOnly, float both,
  float manualOnly, float non, float all, float generatedCoverage, float manualCoverage
where
  package = dataFlowTargApi.getDeclaringType().getPackage().toString() and
  generatedOnly = getNumMadModeledApis(package, "generated") and
  manualOnly = getNumMadModeledApis(package, "manual") and
  both = getNumMadModeledApis(package, "both") and
  all = getTotalNumModeledApis(package) and
  non = all - (generatedOnly + both + manualOnly) and
  generatedCoverage = (both / (both + manualOnly)) and // Proportion of manual models covered by generated ones
  manualCoverage = (both / (both + generatedOnly)) // Proportion of generated models covered by manual ones
select package, generatedOnly, both, manualOnly, non, all, generatedCoverage, manualCoverage
  order by package
